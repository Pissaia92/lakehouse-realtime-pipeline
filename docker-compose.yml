version: '3.8'
services:
  minio:
    image: minio/minio:RELEASE.2024.12.06
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    command: server /data --console-address ":9001"
    volumes:
      - ./data/minio:/data
    networks:
      - lakehouse-net

  kafka:
    image: confluentinc/cp-kafka:7.7.0
    depends_on:
      - minio
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
    networks:
      - lakehouse-net

  zookeeper:
    image: confluentinc/cp-zookeeper:7.7.0
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - lakehouse-net
  
  flink:
    image: flink:1.18-scala_2.12
    ports:
      - "8081:8081"
    depends_on:
      - kafka
    command: jobmanager start-distributed
    networks:
      - lakehouse-net

  iceberg:
    image: apache/iceberg:1.5.0
    depends_on:
      - minio
    command: >
      bash -c "
      mkdir -p /data/iceberg &&
      echo 'Creating Iceberg table in MinIO...' &&
      python3 /opt/iceberg/create_table.py
      "
    volumes:
      - ./data/iceberg:/data/iceberg
    environment:
      MINIO_ENDPOINT: http://minio:9000
      MINIO_ACCESS_KEY: minioadmin
      MINIO_SECRET_KEY: minioadmin
      ICEBERG_TABLE_NAME: orders
    networks:
      - lakehouse-net

  dbt:
    image: ghcr.io/dbt-labs/dbt-core:1.7.0-python3.12
    depends_on:
      - minio
    working_dir: /app
    volumes:
      - ./src/transformations/dbt:/app
    command: >
      bash -c "
      dbt deps &&
      dbt run
      "
    environment:
      DBT_PROFILES_DIR: /app
      DBT_TARGET: prod
      AWS_ACCESS_KEY_ID: minioadmin
      AWS_SECRET_ACCESS_KEY: minioadmin
      AWS_ENDPOINT_URL: http://minio:9000
    networks:
      - lakehouse-net

  duckdb:
    image: duckdb/duckdb:1.3.0
    ports:
      - "8080:8080"
    command: >
      bash -c "
      while ! nc -z localhost 9000; do sleep 1; done;
      python3 -m http.server 8080
      "
    networks:
      - lakehouse-net

  prometheus:
    image: prom/prometheus:v3.0.0
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - lakehouse-net

  grafana:
    image: grafana/grafana:10.0.0
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    volumes:
      - ./prometheus/grafana_dashboard.json:/var/lib/grafana/dashboards/iceberg.json
    networks:
      - lakehouse-net

  loki:
    image: grafana/loki:2.9.0
    ports:
      - "3100:3100"
    command: -config.file=/etc/loki/loki-local-config.yaml
    volumes:
      - ./prometheus/loki.yml:/etc/loki/loki-local-config.yaml
    networks:
      - lakehouse-net

  jaeger:
    image: jaegertracing/all-in-one:1.32
    ports:
      - "16686:16686"
      - "6831:6831/udp"
    networks:
      - lakehouse-net

  redis:
    image: redis:7.2
    ports:
      - "6379:6379"
    networks:
      - lakehouse-net

  telegram-bot:
    image: python:3.12-slim
    depends_on:
      - dbt
    volumes:
      - ./src/notifications:/app
    command: >
      bash -c "
      pip install requests &&
      python3 /app/send_telegram.py
      "
    networks:
      - lakehouse-net

networks:
  lakehouse-net:
    driver: bridge

generator:
  image: python:3.12-slim
  depends_on:
    - kafka
  volumes:
    - ./src/ingestion:/app
  command: >
    bash -c "
    pip install kafka-python &&
    python3 /app/generate_sample_data.py
    "
  networks:
    - lakehouse-net    