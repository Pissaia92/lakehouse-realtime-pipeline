version: '3.8'
services:
  minio:
    image: minio/minio:latest
    ports:
      - 9000:9000
      - 9001:9001
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    command: server /data --console-address ":9001"
    volumes:
      - ./data/minio:/data
    networks:
      - lakehouse-net
  kafka:
    image: bitnami/kafka:latest
    environment:
      KAFKA_CFG_PROCESS_ROLES: "controller,broker"
      KAFKA_CFG_NODE_ID: "1"
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: "CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT"
      KAFKA_CFG_LISTENERS: "PLAINTEXT://0.0.0.0:9092,CONTROLLER://0.0.0.0:9093"
      KAFKA_CFG_ADVERTISED_LISTENERS: "PLAINTEXT://kafka:9092"  # ← MUDAR PARA 'kafka'
      KAFKA_CFG_CONTROLLER_LISTENER_NAMES: "CONTROLLER"
      KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: "1@kafka:9093"
      KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE: "true"
    ports:
      - "9092:9092"
    networks:
      - lakehouse-net
  zookeeper:
    image: confluentinc/cp-zookeeper:7.7.0
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - lakehouse-net
  generator:
    build:
      context: .
      dockerfile: Dockerfile.generator
    depends_on:
      - kafka
    volumes:
      - ./src/ingestion:/app
      - ./data:/data
    networks:
      - lakehouse-net
    entrypoint: [ "bash", "-c", "sleep 30 && python /app/generate_sample_data.py" ]
  flink:
    image: flink:1.18-scala_2.12
    depends_on:
      - kafka
    ports:
      - 8081:8081
    command: |
      /opt/flink/bin/jobmanager.sh start-foreground
    volumes:
      - ./src/processing/flink_sql_job.sql:/opt/flink/examples/sql-job.sql
    networks:
      - lakehouse-net
  iceberg:
    build:
      context: ./docker/iceberg
    depends_on:
      - minio
    networks:
      - lakehouse-net
  dbt:
    image: xemuliam/dbt:1.10-duckdb
    depends_on:
      - minio
    working_dir: /app
    volumes:
      - ./src/transformations/dbt:/app
    stdin_open: true
    tty: true
    command: tail -f /dev/null
    environment:
      DBT_PROFILES_DIR: /app
      DBT_TARGET: dev
      AWS_ACCESS_KEY_ID: minioadmin
      AWS_SECRET_ACCESS_KEY: minioadmin
      AWS_ENDPOINT_URL: http://minio:9000
    networks:
      - lakehouse-net
  duckdb:
    build:
      context: ./docker/duckdb
    depends_on:
      - minio
    ports:
      - 8080:8080
    networks:
      - lakehouse-net
  prometheus:
    image: prom/prometheus:v3.0.0
    ports:
      - 9090:9090
    command:
      - --config.file=/etc/prometheus/prometheus.yml
    environment:
      - PROMETHEUS_CONFIG_FILE=/etc/prometheus/prometheus.yml
    networks:
      - lakehouse-net
  grafana:
    image: grafana/grafana:10.0.0
    depends_on:
      - prometheus
    ports:
      - 3000:3000
    volumes:
      - ./prometheus/grafana_dashboard.json:/var/lib/grafana/dashboards/iceberg.json
    networks:
      - lakehouse-net
  loki:
    image: grafana/loki:2.9.0
    command: -config.file=/etc/loki/local-config.yaml
    ports:
      - 3100:3100
    networks:
      - lakehouse-net
  jaeger:
    image: jaegertracing/all-in-one:1.32
    ports:
      - 16686:16686
      - 6831:6831/udp
    networks:
      - lakehouse-net
  redis:
    image: redis:7.2
    ports:
      - 6379:6379
      - 6380:6380
    networks:
      - lakehouse-net
  loader:
    image: python:3.12-slim
    depends_on:
      - kafka
    command: >
      bash -c " pip install pandas kafka-python && python3
      /app/load_sample_data.py "
    volumes:
      - ./src/ingestion:/app
      - ./data:/data
    networks:
      - lakehouse-net
     
networks:
  lakehouse-net:
    driver: bridge   